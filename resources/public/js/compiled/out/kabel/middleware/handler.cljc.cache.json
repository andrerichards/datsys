["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Object",["^ "]],"~:use-macros",["^ ","~$>?","~$superv.async","~$<?","^7","~$superv-init","^7","~$go-loop-try","^7"],"~:excludes",["~#set",[]],"~:name","~$kabel.middleware.handler","~:imports",null,"~:requires",["^ ","~$set","~$clojure.set","^B","^B","^7","^7","~$async","~$cljs.core.async","^D","^D"],"~:uses",["^ ","~$close!","^D","~$chan","^D","^9","^7"],"~:defs",["^ ","~$handler",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/csmall/code/datsys/resources/public/js/compiled/out/kabel/middleware/handler.cljc","~:line",12,"~:column",7,"~:end-line",12,"~:end-column",14,"~:arglists",["~#list",["~$quote",["^R",[["~$cb-in","~$cb-out",["~$S","~$peer",["~$in","~$out"]]]]]]],"~:doc","Applies given callback functions to messages on [in out] channels and passes\n  through the return value of the callback. The callbacks have to return a\n  go-channel."],"^=","~$kabel.middleware.handler/handler","~:variadic",false,"^L","resources/public/js/compiled/out/kabel/middleware/handler.cljc","^P",14,"~:method-params",["^R",[["^T","^U","~$p__71033"]]],"~:protocol-impl",null,"~:arglists-meta",["^R",[null,null]],"^N",1,"^M",12,"^O",12,"~:max-fixed-arity",3,"~:fn-var",true,"^Q",["^R",["^S",["^R",[["^T","^U",["~$S","^V",["^W","^X"]]]]]]],"^Y","Applies given callback functions to messages on [in out] channels and passes\n  through the return value of the callback. The callbacks have to return a\n  go-channel."]],"~:require-macros",["^ ","^7","^7"],"~:cljs.analyzer/constants",["^ ","~:seen",["^<",["~:true","~$S","~$i","^F","~:else","^W","~$new-in","~$when-let","~$o","^6","~:aborted","~:recur","~:type","~$do","^T","^8","~$if","~:priority","~$recur","~$new-out","^X","~$clojure.core/loop","^U"]],"~:order",["^1E","~$i","^8","~$S","^W","^1A","^1@","^1<","^T","^6","^1;","^1C","^F","^1>","^1B","^19","^1?","^1=","^1:","~$o","^1D","^U","^X"]],"^Y","Generic callback handler middleware."]